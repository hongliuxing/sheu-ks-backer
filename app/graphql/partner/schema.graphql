# 查询模型 Partner 的类型对象
type Partner{
	id: ID, # 编号
	unionid: String, # 平台统一编号
	openid: String, # App独立编号
	school_id: Int, # 学校编号
	nickname: String, # 昵称(通常是微信昵称)
	realname: String, # 真实姓名(必填)
	person_id: String, # 身份证号(必填)
	telephone: String, # 联系方式(必填)
	logo_url: String, # 头像(默认获取微信头像url)
	gender: Int, # 1小哥哥 0小姐姐
	struts: Int, # 状态（0 未审核  1 已审核）
	createAt: Datetime, # 
}

# 用于查询模型 Partner 的方法，继承自 Query。
extend type Query{
	partner(id: ID): Partner,  # 根据ID查询单个 Partner 对象
	partnerAll(
		page: Page, # 分页对象
		order: [OrderEntry], # 排序方式
	): [Partner],  # 查询全部 Partner 对象
}

# 更改模型 Partner 的 input 输入对象
input PartnerInput{
	id: ID, # 编号
	unionid: String, # 平台统一编号
	openid: String, # App独立编号
	school_id: Int, # 学校编号
	nickname: String, # 昵称(通常是微信昵称)
	realname: String, # 真实姓名(必填)
	person_id: String, # 身份证号(必填)
	telephone: String, # 联系方式(必填)
	logo_url: String, # 头像(默认获取微信头像url)
	gender: Int, # 1小哥哥 0小姐姐
	struts: Int, # 状态（0 未审核  1 已审核）
	createAt: Datetime, # 
}

# 用于更改模型 Partner 的方法，继承自 Mutation。
extend type Mutation{
	addPartner(partner: PartnerInput): Partner!, # 新增
	updatePartner(partner: PartnerInput): MessageUpdate!, # 修改,返回更新影响行数
	removePartner(id: ID!): MessageUpdate!, # 删除,返回更新影响行数
}

